Verify Command

Command changes:
--trace => --show-cex
--signed-overflow-check -> --unsigned-overflow-check
--show-properties => ?
--div-by-zero-check => --no-div-by-zero-check
--bounds-check => --no-bounds-check 
--pointer-check => --no-pointer-check
--unwinding-assertions => --no-unwinding-assertions

Ex3:
Không tìm thấy file thực thi goto-cc

Ex13:
Lỗi xảy ra do truy xuất con trỏ p, cụ thể là lệnh:
z = *p;
Khi p trỏ đến một vùng nhớ không hợp lệ, assert(z == 10); có thể bị vi phạm.

Ex19: 
Không chạy được.


esbmc --help

* * *           ESBMC 7.8.1          * * *

Main Usage:
  --input-file file.c ...               source file names

Options:
  -? [ --help ]                         show help

Printing options:
  --symbol-table-only                   only show symbol table
  --symbol-table-too                    show symbol table and verify
  --parse-tree-only                     only show parse tree
  --parse-tree-too                      show parse tree and verify
  --goto-functions-only                 only show goto program
  --goto-functions-too                  show goto program and verify
  --dump-goto-cfg                       create a file for each function with 
                                        the associated CFG in DOT format
  --program-only                        only show program expression
  --program-too                         show program expression and verify
  --ssa-symbol-table                    show symbol table along with SSA
  --ssa-guards 
  --ssa-sliced                          print the sliced SSAs
  --ssa-no-location 
  --smt-formula-only                    only show SMT formula {not supported by
                                        all solvers},
  --smt-formula-too                     show SMT formula (not supported by all 
                                        solvers), and verify
  --smt-model                           show SMT model (not supported by all 
                                        solvers), if the formula is SAT
  --color                               show colored output
  --log-message                         print LOG message including file, line,
                                        and timestamp
  --keep-alive-interval interval        Set interval (in seconds) for keep 
                                        alive messages (default: 60)
  --enable-keep-alive                   Enable keep alive messages during long 
                                        solving processes

Trace:
  --quiet                               do not print unwinding information 
                                        during symbolic execution
  --compact-trace                       enable --no-slice while not printing 
                                        the ESBMC's internal symbol
  --symex-trace                         print instructions during symbolic 
                                        execution
  --ssa-trace                           print SSA during SMT encoding
  --ssa-smt-trace                       print generated SMT during SMT encoding
  --ssa-features-dump                   print features in the SSA (just before 
                                        conversion)
  --symex-ssa-trace                     print generated SSA during symbolic 
                                        execution
  --goto2c                              translate the GOTO program to C
  --show-goto-value-sets                show value-set analysis for the goto 
                                        functions
  --show-symex-value-sets               show value-set analysis during symbolic
                                        execution

Python frontend:
  --python path                         Python interpreter binary to use 
                                        (searched in $PATH; default: python)

Solidity frontend:
  --sol path                            .sol and .solast file names
  --contract cname                      set contract name
  --no-visibility                       force to verify every function, even 
                                        it's an unreachable internal/private 
                                        function

Frontend:
  -I [ --include ] path                 set include path
  --include-file file                   include files via frontend's -include 
                                        option before anything else
  --nostdinc                            do not include from standard system 
                                        paths
  --idirafter path                      append system include path to search 
                                        after system headers
  -D [ --define ] macro                 define preprocessor macro
  -W [ --warning ] arg                  enable specific frontend warnings, 
                                        disable with "no-" prefix, or pass 
                                        options directly to the C/C++ frontends
                                        with the form -Wc,OPT1,OPT2,...
  --std version                         set C/C++ standard version
  --sysroot <path>                      set the sysroot for the frontend
  --no-abstracted-cpp-includes          do not include abstract cpp operational
                                        models
  -f [ --force ] arg
  --preprocess                          stop after preprocessing
  --no-inlining                         disable inlining function calls
  --full-inlining                       perform full inlining of function calls
  --all-claims                          keep all claims
  --keep-verified-claims                do not skip verified claims in 
                                        multi-property verification
  --show-loops                          show the loops in the program
  --show-claims                         only show claims
  --show-vcc                            show the verification conditions
  --show-stacktrace                     show the stack trace of function call 
                                        in the counterexample
  --document-subgoals                   generate subgoals documentation
  --no-arch                             don't set up an architecture
  --no-library                          disable built-in abstract C library
  --no-string-literal                   ignores string literals (replace by 
                                        NULL)
  --output-goto arg                     export generated goto program
  --binary                              read goto program instead of source 
                                        code
  --little-endian                       allow little-endian word-byte 
                                        conversions
  --big-endian                          allow big-endian word-byte conversions
  --16                                  set width of machine word (default is 
                                        64)
  --32                                  set width of machine word (default is 
                                        64)
  --64                                  set width of machine word (default is 
                                        64)
  --cheri mode                          enable CHERI-C in 'hybrid' or 'purecap'
                                        mode (default is off)
  --cheri-uncompressed                  use full CHERI capabilites instead of 
                                        the concentrate format
  --version                             show current ESBMC version and exit
  --cex-output arg                      save the counterexample into a file or,
                                        in multi-property mode, multiple files 
                                        with name prefix 'N-' where 'N' is a 
                                        decimal increasing from zero
  --file-output arg                     redirects every message into a file (no
                                        stdout/stderr)
  --witness-output { path | - }         generate the verification result 
                                        witness in GraphML format; use '-' for 
                                        output to stdout
  --witness-producer arg
  --witness-programfile arg
  --generate-testcase                   if a solution is found, generates a 
                                        testcase in XML
  --generate-html-report                if a violation is found, generates a 
                                        HTML report
  --generate-json-report                if a violation is found, generates a 
                                        JSON report
  --old-frontend                        parse source files using our old 
                                        frontend {deprecated},
  --result-only                         do not print the counter-example
  --i386-macos                          set MACOS/I386 architecture
  --ppc-macos                           set PPC/I386 architecture
  --i386-linux                          set Linux/I386 architecture (default),
  --i386-win32                          set Windows/I386 architecture
  --funsigned-char                      make "char" unsigned by default
  --fms-extensions                      enable microsoft C extensions

BMC:
  --function name                       set main function name
  --class cname                         set the class/namespace name where the 
                                        function is inside
  --claim nr                            only check specific claim
  --instruction nr                      limit the number of instructions 
                                        executed during symbolic execution
  --unwind nr                           unwind nr times
  --unwindset L:nr,...                  unwind loop L with nr times (use 
                                        --show-loops to get the loops info)
  --no-unwinding-assertions             do not generate unwinding assertions
  --no-remove-unreachable               disable the removal of unreachable code
                                        in GOTO programs
  --no-remove-no-op                     disable the removal of NO-OP 
                                        instructions in GOTO programs
  --partial-loops                       permit paths with partial loops
  --unroll-loops 
  --no-slice                            do not remove unused equations
  --multi-fail-fast n                   stops after first n VCC violation found
                                        in multi property mode
  --no-slice-name name                  disable slicing for all symbols 
                                        generated with the given name
  --no-slice-id id                      disable slicing for the symbol with the
                                        given id
  --goto-unwind                         unroll bounded loops at goto level
  --unlimited-goto-unwind               do not unroll bounded loops at goto 
                                        level (need to enable --goto-unwind)
  --slice-assumes                       remove unused assume statements
  --extended-try-analysis 
  --skip-bmc                            do not perform bounded model checking
  --cache-asserts                       cache asserts that were already proven 
                                        correct

Incremental BMC:
  --incremental-bmc                     incremental loop unwinding verification
  --falsification                       incremental loop unwinding for bug 
                                        searching
  --termination                         incremental loop unwinding assertion 
                                        verification

Solver:
  --list-solvers                        list available solvers and exit
  --boolector                           use Boolector (default),
  --z3                                  use Z3
  --z3-debug                            extracts Z3 dump and SMT2 formula
  --z3-debug-dump-file z3.log           name for Z3 dump file
  --z3-debug-smt-file log.smt2          name for Z3 smt2 file
  --mathsat                             use MathSAT
  --cvc                                 alias for --cvc4; this may change in 
                                        the future to --cvc5
  --cvc4                                use CVC4
  --cvc5                                use CVC5
  --yices                               use Yices
  --bitwuzla                            use Bitwuzla
  --bv                                  use solver with bit-vector arithmetic
  --ir                                  use solver with integer/real arithmetic
  --smtlib                              use SMT lib format
  --default-solver <solver>             override default solver used if no 
                                        concrete one is specified (Boolector)
  --non-supported-models-as-zero        if ESBMC can't extract a 
                                        type/expression from the solver, then 
                                        the value will be set to zero
  --smtlib-solver-prog arg              SMT lib program name
  --output <filename>                   output VCCs in SMT lib format to given 
                                        file (or stdout if it is '-')
  --floatbv                             encode floating-point using the SMT 
                                        floating-point theory (default)
  --fixedbv                             encode floating-point as fixed 
                                        bit-vectors
  --fp2bv                               encode floating-point as 
                                        bit-vectors(default for solvers that 
                                        don't support the SMT floating-point 
                                        theory)
  --tuple-node-flattener                encode tuples using our tuple to node 
                                        API
  --tuple-sym-flattener                 encode tuples using our tuple to symbol
                                        API
  --array-flattener                     encode arrays using our array API
  --no-return-value-opt                 disable return value optimization to 
                                        compute the stack size

Incremental SMT:
  --smt-during-symex                    enable incremental SMT solving
  --smt-thread-guard                    check the thread guard during thread 
                                        exploration
  --smt-symex-guard                     check conditional goto statements 
                                        during symbolic execution
  --smt-symex-assert                    check assertion statements during 
                                        symbolic execution
  --smt-symex-assume                    check assume statements during symbolic
                                        execution

Property checking:
  --multi-property                      verify satisfiability of all claims of 
                                        the current bound
  --no-standard-checks                  disable default checks
  --no-assertions                       ignore assertions
  --no-bounds-check                     do not do array bounds check
  --no-div-by-zero-check                do not do division by zero check
  --no-pointer-check                    do not do pointer check
  --no-align-check                      do not check pointer alignment
  --no-unlimited-scanf-check            do not do overflow check for 
                                        scanf/fscanf with unlimited character 
                                        width.
  --no-vla-size-check                   do not check whether the size of VLAs 
                                        overflows the available address space
  --no-abnormal-memory-leak             affects --memory-leak-check; if both 
                                        are enabled, the check for memory leaks
                                        is only performed for normal 
                                        termination, that is, not for abort()
  --no-reachable-memory-leak            exclude still reachable objects from 
                                        --memory-leak-check
  --nan-check                           check floating-point for NaN
  --memory-leak-check                   enable memory leak check
  --overflow-check                      enable arithmetic over- and underflow 
                                        check
  --unsigned-overflow-check             enable arithmetic over- and underflow 
                                        check for unsigned integers
  --ub-shift-check                      enable undefined behavior check on 
                                        shift operations
  --struct-fields-check                 enable over-sized read checks for 
                                        struct fields
  --deadlock-check                      enable global and local deadlock check 
                                        with mutex
  --data-races-check                    enable data races check
  --lock-order-check                    enable for lock acquisition ordering 
                                        check
  --atomicity-check                     enable atomicity check at visible 
                                        assignments
  --stack-limit bits (=-1)              check if stack limit is respected
  --error-label label                   check if label is unreachable
  --force-malloc-success                do not check for malloc/new failure
  --malloc-zero-is-null                 force malloc(0) to return NULL
  --enable-unreachability-intrinsic     enable the functionality of the 
                                        __ESBMC_unreachable() intrinsic, which 
                                        results in a verification failure when 
                                        its call is reachable
  --conv-assert-to-assume               convert assertions for bounds and 
                                        pointer checks into assumptions

k-induction:
  --base-case                           check the base case
  --forward-condition                   check the forward condition
  --inductive-step                      check the inductive step
  --k-induction                         prove by k-induction 
  --goto-contractor                     enable contractor-based interval 
                                        refinements on goto level on asserts
  --goto-contractor-condition           enable contractor-based interval 
                                        refinements on goto level on conditions
  --k-induction-parallel                prove by k-induction, running each step
                                        on a separate process
  --k-step nr (=1)                      set k increment (default is 1)
  --max-k-step nr (=50)                 set max number of iteration (default is
                                        50)
  --base-k-step nr (=1)                 start the base case from n step 
                                        (default is 1)
  --show-cex                            print the counter-example produced by 
                                        the inductive step
  --bidirectional 
  --unlimited-k-steps                   set max number of iteration to UINT_MAX
  --max-inductive-step nr (=-1)

Scheduling:
  --schedule                            use schedule recording approach

Concurrency checking:
  --context-bound nr (=-1)              limit number of context switches for 
                                        each thread
  --state-hashing                       enable state-hashing, prunes duplicate 
                                        states
  --no-goto-merge                       do not not merge gotos when restoring 
                                        the last paths after a context-switch
  --no-por                              do not do partial order reduction
  --all-runs                            check all interleavings, even if a bug 
                                        was already found

Interval Analysis:
  --interval-analysis                   enable interval analysis for integer 
                                        and float variables and add assumes to 
                                        the program
  --interval-analysis-dump              dump resulting intervals for the 
                                        analysis
  --interval-analysis-csv-dump arg      dump resulting intervals for the 
                                        analysis in a csv file
  --interval-analysis-wrapped           enable analysis using wrapped intervals
                                        (disables Integers)
  --interval-analysis-arithmetic        enable interval arithmetic for integer 
                                        variables (Integers and Wrapped)
  --interval-analysis-bitwise           enable interval bitwise for integer 
                                        variables (Integers and Wrapped
  --interval-analysis-modular           enable modular arithmetic for integer 
                                        variables (Integers and Wrapped)
  --interval-analysis-simplify          enable assertion simplification during 
                                        interval analysis (all)
  --interval-analysis-no-contract       disables use of contractors in abstract
                                        states (Integers, Reals)
  --interval-analysis-assume-asserts    propagates asserts as being assertions 
                                        (Integers, Reals)
  --interval-analysis-eval-assumptions  evaluates assumptions/guards as boolean
                                        operators, accelerating the convergence
                                        (Integers, Reals)
  --interval-analysis-ibex-contractor   enable use of ibex contractors
  --interval-analysis-extrapolate       enables use of extrapolation in 
                                        abstract states (all)
  --interval-analysis-extrapolate-limit nr (=1)
                                        set limit for reaching a fixpoint 
                                        (default 5)
  --interval-analysis-extrapolate-under-approximate 
                                        assumes that Integers will not overflow
                                        (Integers)
  --interval-analysis-narrowing         enables use of narrowing in abstract 
                                        states (Integers and Reals)

Miscellaneous options:
  --memlimit limit                      configure memory limit, of form "100m" 
                                        or "2g"; without suffix the default 
                                        unit is 'm'.
  --memstats                            print memory usage statistics
  --timeout t                           configure time limit, integer followed 
                                        by {s,m,h}
  --enable-core-dump                    do not disable core dump output
  --no-simplify                         do not simplify any expression
  --no-propagation                      disable constant propagation
  --gcse                                adds intermediate variables to 
                                        precompute common sub-expressions 
                                        between assignments
  --add-symex-value-sets                enable value-set analysis for pointers 
                                        and add assumes to the program

Coverage options:
  --assertion-coverage                  shows the coverage of assertion 
                                        statements
  --assertion-coverage-claims           enable assertion-coverage and shows all
                                        reached claims
  --condition-coverage                  this activates --multi-property, 
                                        deactivates --keep-verified-claims, and
                                        shows the coverage of condition 
                                        statements
  --condition-coverage-claims           enable condition-coverage and shows the
                                        instrumented claims
  --condition-coverage-rm               use '--condition-coverage' while 
                                        disable '--no-remove-unreachable'
  --condition-coverage-claims-rm        use '--condition-coverage-claims' while
                                        disable '--no-remove-unreachable'
  --no-cov-asserts                      does not count the guard in the 
                                        assertions
  --branch-coverage                     shows the coverage of branch
  --branch-coverage-claims              enable branch-coverage and shows all 
                                        reached claims
  --branch-function-coverage            shows the coverage of branch and 
                                        function entry
  --branch-function-coverage-claims     enable branch-coverage-ext and shows 
                                        all reached claims

DEBUG options:
  --git-hash 
  --double-assign-check 
  --no-pointer-relation-check           do not check whether pointers in order 
                                        relations refer to the same object 
                                        (unsound)
  --abort-on-recursion 
  --ltl 
  --verbosity arg                       Verbosity of log output, can be given 
                                        multiple times. Parameter is either a 
                                        decimal N or 'module:N' to set the 
                                        log-level of debug messages of the 
                                        module to N; without module, it sets 
                                        the global log-level
  --break-at arg
  --direct-interleavings 
  --show-ileave-points 
  --print-stack-traces 
  --interactive-ileaves 
  --segfault-handler                    print stacktrace on segmentation fault